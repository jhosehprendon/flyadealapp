//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Newskies.SessionManager
{
    using System;
    using System.Runtime.Serialization;

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "LogonRequestData", Namespace = "http://schemas.navitaire.com/WebServices/DataContracts/Session")]
    
    public partial class LogonRequestData : object, System.ComponentModel.INotifyPropertyChanged
    {

        private string DomainCodeField;

        
        private string AgentNameField;

        
        private string PasswordField;

        
        private string LocationCodeField;

        
        private string RoleCodeField;

        
        private string TerminalInfoField;

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DomainCode
        {
            get
            {
                return this.DomainCodeField;
            }
            set
            {
                if ((object.ReferenceEquals(this.DomainCodeField, value) != true))
                {
                    this.DomainCodeField = value;
                    this.RaisePropertyChanged("DomainCode");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute(Order = 1)]
        public string AgentName
        {
            get
            {
                return this.AgentNameField;
            }
            set
            {
                if ((object.ReferenceEquals(this.AgentNameField, value) != true))
                {
                    this.AgentNameField = value;
                    this.RaisePropertyChanged("AgentName");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute(Order = 2)]
        public string Password
        {
            get
            {
                return this.PasswordField;
            }
            set
            {
                if ((object.ReferenceEquals(this.PasswordField, value) != true))
                {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute(Order = 3)]
        public string LocationCode
        {
            get
            {
                return this.LocationCodeField;
            }
            set
            {
                if ((object.ReferenceEquals(this.LocationCodeField, value) != true))
                {
                    this.LocationCodeField = value;
                    this.RaisePropertyChanged("LocationCode");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute(Order = 4)]
        public string RoleCode
        {
            get
            {
                return this.RoleCodeField;
            }
            set
            {
                if ((object.ReferenceEquals(this.RoleCodeField, value) != true))
                {
                    this.RoleCodeField = value;
                    this.RaisePropertyChanged("RoleCode");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute(Order = 5)]
        public string TerminalInfo
        {
            get
            {
                return this.TerminalInfoField;
            }
            set
            {
                if ((object.ReferenceEquals(this.TerminalInfoField, value) != true))
                {
                    this.TerminalInfoField = value;
                    this.RaisePropertyChanged("TerminalInfo");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "TokenRequest", Namespace = "http://schemas.navitaire.com/WebServices/DataContracts/Session")]
    
    public partial class TokenRequest : object, System.ComponentModel.INotifyPropertyChanged
    {
        
        private string TokenField;

        
        private string TerminalInfoField;

        
        private ChannelType ChannelTypeField;

        
        private SystemType SystemTypeField;

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Token
        {
            get
            {
                return this.TokenField;
            }
            set
            {
                if ((object.ReferenceEquals(this.TokenField, value) != true))
                {
                    this.TokenField = value;
                    this.RaisePropertyChanged("Token");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute(Order = 1)]
        public string TerminalInfo
        {
            get
            {
                return this.TerminalInfoField;
            }
            set
            {
                if ((object.ReferenceEquals(this.TerminalInfoField, value) != true))
                {
                    this.TerminalInfoField = value;
                    this.RaisePropertyChanged("TerminalInfo");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute(Order = 2)]
        public ChannelType ChannelType
        {
            get
            {
                return this.ChannelTypeField;
            }
            set
            {
                if ((this.ChannelTypeField.Equals(value) != true))
                {
                    this.ChannelTypeField = value;
                    this.RaisePropertyChanged("ChannelType");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute(Order = 3)]
        public SystemType SystemType
        {
            get
            {
                return this.SystemTypeField;
            }
            set
            {
                if ((this.SystemTypeField.Equals(value) != true))
                {
                    this.SystemTypeField = value;
                    this.RaisePropertyChanged("SystemType");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "ChannelType", Namespace = "http://schemas.navitaire.com/WebServices/DataContracts/Common/Enumerations")]
    public enum ChannelType : int
    {

        [System.Runtime.Serialization.EnumMemberAttribute()]
        Default = 0,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        Direct = 1,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        Web = 2,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        GDS = 3,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        API = 4,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unmapped = -1,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "SystemType", Namespace = "http://schemas.navitaire.com/WebServices/DataContracts/Common/Enumerations")]
    public enum SystemType : int
    {

        [System.Runtime.Serialization.EnumMemberAttribute()]
        Default = 0,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        WinRez = 1,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        FareManager = 2,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        ScheduleManager = 3,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        WinManager = 4,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConsoleRez = 5,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebRez = 6,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebServicesAPI = 7,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebServicesESC = 8,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        InternalService = 9,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebReporting = 10,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        TaxAndFeeManager = 11,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        DCS = 12,

        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unmapped = -1,
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "TransferSessionResponseData", Namespace = "http://schemas.navitaire.com/WebServices/DataContracts/Session")]
    
    public partial class TransferSessionResponseData : object, System.ComponentModel.INotifyPropertyChanged
    {

        
        private string SignatureField;

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Signature
        {
            get
            {
                return this.SignatureField;
            }
            set
            {
                if ((object.ReferenceEquals(this.SignatureField, value) != true))
                {
                    this.SignatureField = value;
                    this.RaisePropertyChanged("Signature");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace = "http://schemas.navitaire.com/WebServices", ConfigurationName = "SessionManager.ISessionManager")]
    public interface ISessionManager
    {

        [System.ServiceModel.OperationContractAttribute(Action = "http://schemas.navitaire.com/WebServices/ISessionManager/ChangePassword", ReplyAction = "http://schemas.navitaire.com/WebServices/ISessionManager/ChangePasswordResponse")]
        System.Threading.Tasks.Task<ChangePasswordResponse> ChangePasswordAsync(ChangePasswordRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://schemas.navitaire.com/WebServices/ISessionManager/Logon", ReplyAction = "http://schemas.navitaire.com/WebServices/ISessionManager/LogonResponse")]
        System.Threading.Tasks.Task<LogonResponse> LogonAsync(LogonRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://schemas.navitaire.com/WebServices/ISessionManager/Logout", ReplyAction = "http://schemas.navitaire.com/WebServices/ISessionManager/LogoutResponse")]
        System.Threading.Tasks.Task<LogoutResponse> LogoutAsync(LogoutRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://schemas.navitaire.com/WebServices/ISessionManager/TransferSession", ReplyAction = "http://schemas.navitaire.com/WebServices/ISessionManager/TransferSessionResponse")]
        System.Threading.Tasks.Task<TransferSessionResponse> TransferSessionAsync(TransferSessionRequest request);

        [System.ServiceModel.OperationContractAttribute(Action = "http://schemas.navitaire.com/WebServices/ISessionManager/KeepAlive", ReplyAction = "http://schemas.navitaire.com/WebServices/ISessionManager/KeepAliveResponse")]
        System.Threading.Tasks.Task<KeepAliveResponse> KeepAliveAsync(KeepAliveRequest request);
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "ChangePasswordRequest", WrapperNamespace = "http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", IsWrapped = true)]
    public partial class ChangePasswordRequest
    {

        [System.ServiceModel.MessageHeaderAttribute(Namespace = "http://schemas.navitaire.com/WebServices")]
        public int ContractVersion;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", Order = 0)]
        public LogonRequestData logonRequestData;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", Order = 1)]
        public string newPassword;

        public ChangePasswordRequest()
        {
        }

        public ChangePasswordRequest(int ContractVersion, LogonRequestData logonRequestData, string newPassword)
        {
            this.ContractVersion = ContractVersion;
            this.logonRequestData = logonRequestData;
            this.newPassword = newPassword;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped = false)]
    public partial class ChangePasswordResponse
    {

        public ChangePasswordResponse()
        {
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "LogonRequest", WrapperNamespace = "http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", IsWrapped = true)]
    public partial class LogonRequest
    {

        [System.ServiceModel.MessageHeaderAttribute(Namespace = "http://schemas.navitaire.com/WebServices")]
        public int ContractVersion;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", Order = 0)]
        public LogonRequestData logonRequestData;

        public LogonRequest()
        {
        }

        public LogonRequest(int ContractVersion, LogonRequestData logonRequestData)
        {
            this.ContractVersion = ContractVersion;
            this.logonRequestData = logonRequestData;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "LogonResponse", WrapperNamespace = "http://schemas.navitaire.com/WebServices", IsWrapped = true)]
    public partial class LogonResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://schemas.navitaire.com/WebServices", Order = 0)]
        public string Signature;

        public LogonResponse()
        {
        }

        public LogonResponse(string Signature)
        {
            this.Signature = Signature;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "LogoutRequest", WrapperNamespace = "http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", IsWrapped = true)]
    public partial class LogoutRequest
    {

        [System.ServiceModel.MessageHeaderAttribute(Namespace = "http://schemas.navitaire.com/WebServices")]
        public int ContractVersion;

        [System.ServiceModel.MessageHeaderAttribute(Namespace = "http://schemas.navitaire.com/WebServices")]
        public string Signature;

        public LogoutRequest()
        {
        }

        public LogoutRequest(int ContractVersion, string Signature)
        {
            this.ContractVersion = ContractVersion;
            this.Signature = Signature;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped = false)]
    public partial class LogoutResponse
    {

        public LogoutResponse()
        {
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "TransferSessionRequest", WrapperNamespace = "http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", IsWrapped = true)]
    public partial class TransferSessionRequest
    {

        [System.ServiceModel.MessageHeaderAttribute(Namespace = "http://schemas.navitaire.com/WebServices")]
        public int ContractVersion;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", Order = 0)]
        public TokenRequest tokenRequest;

        public TransferSessionRequest()
        {
        }

        public TransferSessionRequest(int ContractVersion, TokenRequest tokenRequest)
        {
            this.ContractVersion = ContractVersion;
            this.tokenRequest = tokenRequest;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "TransferSessionResponse", WrapperNamespace = "http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", IsWrapped = true)]
    public partial class TransferSessionResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", Order = 0)]
        public TransferSessionResponseData TransferSessionResponseData;

        public TransferSessionResponse()
        {
        }

        public TransferSessionResponse(TransferSessionResponseData TransferSessionResponseData)
        {
            this.TransferSessionResponseData = TransferSessionResponseData;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "KeepAliveRequest", WrapperNamespace = "http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", IsWrapped = true)]
    public partial class KeepAliveRequest
    {

        [System.ServiceModel.MessageHeaderAttribute(Namespace = "http://schemas.navitaire.com/WebServices")]
        public int ContractVersion;

        [System.ServiceModel.MessageHeaderAttribute(Namespace = "http://schemas.navitaire.com/WebServices")]
        public string Signature;

        public KeepAliveRequest()
        {
        }

        public KeepAliveRequest(int ContractVersion, string Signature)
        {
            this.ContractVersion = ContractVersion;
            this.Signature = Signature;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped = false)]
    public partial class KeepAliveResponse
    {

        public KeepAliveResponse()
        {
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    public interface ISessionManagerChannel : Newskies.SessionManager.ISessionManager, System.ServiceModel.IClientChannel
    {
    }
    
    // [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    public partial class SessionManagerClient : System.ServiceModel.ClientBase<Newskies.SessionManager.ISessionManager>, Newskies.SessionManager.ISessionManager// , System.IDisposable
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public SessionManagerClient() : 
                base(SessionManagerClient.GetDefaultBinding(), SessionManagerClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ISessionManager.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SessionManagerClient(EndpointConfiguration endpointConfiguration) : 
                base(SessionManagerClient.GetBindingForEndpoint(endpointConfiguration), SessionManagerClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SessionManagerClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(SessionManagerClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SessionManagerClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(SessionManagerClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SessionManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<Newskies.SessionManager.ChangePasswordResponse> ChangePasswordAsync(Newskies.SessionManager.ChangePasswordRequest request)
        {
            return base.Channel.ChangePasswordAsync(request);
        }
        
        public System.Threading.Tasks.Task<Newskies.SessionManager.LogonResponse> LogonAsync(Newskies.SessionManager.LogonRequest request)
        {
            return base.Channel.LogonAsync(request);
        }
        
        public System.Threading.Tasks.Task<Newskies.SessionManager.LogoutResponse> LogoutAsync(Newskies.SessionManager.LogoutRequest request)
        {
            return base.Channel.LogoutAsync(request);
        }
        
        public System.Threading.Tasks.Task<Newskies.SessionManager.TransferSessionResponse> TransferSessionAsync(Newskies.SessionManager.TransferSessionRequest request)
        {
            return base.Channel.TransferSessionAsync(request);
        }
        
        public System.Threading.Tasks.Task<Newskies.SessionManager.KeepAliveResponse> KeepAliveAsync(Newskies.SessionManager.KeepAliveRequest request)
        {
            return base.Channel.KeepAliveAsync(request);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISessionManager))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISessionManager))
            {
                return new System.ServiceModel.EndpointAddress("https://0pprodr4xapi.navitaire.com/SessionManager.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return SessionManagerClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ISessionManager);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return SessionManagerClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ISessionManager);
        }

        public enum EndpointConfiguration
        {
            BasicHttpBinding_ISessionManager,
        }

        //public void Dispose()
        //{
        //    (base.Channel as IDisposable)?.Dispose();
        //    (base.ChannelFactory as IDisposable)?.Dispose();
        //    (base.InnerChannel as IDisposable)?.Dispose();
        //}
    }
}
